// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package com.tchaika.cashu_sdk;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_cashu_sdk_rustbuffer_alloc(size, status).also {
                if(it.data == null) {
                   throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
               }
            }
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_cashu_sdk_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getInt(0))
        value.writeField("len", pointer.getInt(4))
        value.writeField("data", pointer.getPointer(8))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: RustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == 0.toByte()
    }

    fun isError(): Boolean {
        return code == 1.toByte()
    }

    fun isPanic(): Boolean {
        return code == 2.toByte()
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus();
    val return_value = callback(status)
    checkCallStatus(errorHandler, status)
    return return_value
}

// Check RustCallStatus and throw an error if the call wasn't successful
private fun<E: Exception> checkCallStatus(errorHandler: CallStatusErrorHandler<E>, status: RustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler: CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback);
}

// IntegerType that matches Rust's `usize` / C's `size_t`
public class USize(value: Long = 0) : IntegerType(Native.SIZE_T_SIZE, value, true) {
    // This is needed to fill in the gaps of IntegerType's implementation of Number for Kotlin.
    override fun toByte() = toInt().toByte()
    override fun toChar() = toInt().toChar()
    override fun toShort() = toInt().toShort()

    fun writeToBuffer(buf: ByteBuffer) {
        // Make sure we always write usize integers using native byte-order, since they may be
        // casted to pointer values
        buf.order(ByteOrder.nativeOrder())
        try {
            when (Native.SIZE_T_SIZE) {
                4 -> buf.putInt(toInt())
                8 -> buf.putLong(toLong())
                else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
            }
        } finally {
            buf.order(ByteOrder.BIG_ENDIAN)
        }
    }

    companion object {
        val size: Int
            get() = Native.SIZE_T_SIZE

        fun readFromBuffer(buf: ByteBuffer) : USize {
            // Make sure we always read usize integers using native byte-order, since they may be
            // casted from pointer values
            buf.order(ByteOrder.nativeOrder())
            try {
                return when (Native.SIZE_T_SIZE) {
                    4 -> USize(buf.getInt().toLong())
                    8 -> USize(buf.getLong())
                    else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
                }
            } finally {
                buf.order(ByteOrder.BIG_ENDIAN)
            }
        }
    }
}


// Map handles to objects
//
// This is used when the Rust code expects an opaque pointer to represent some foreign object.
// Normally we would pass a pointer to the object, but JNA doesn't support getting a pointer from an
// object reference , nor does it support leaking a reference to Rust.
//
// Instead, this class maps USize values to objects so that we can pass a pointer-sized type to
// Rust when it needs an opaque pointer.
//
// TODO: refactor callbacks to use this class
internal class UniFfiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<USize, T>()
    // Use AtomicInteger for our counter, since we may be on a 32-bit system.  4 billion possible
    // values seems like enough. If somehow we generate 4 billion handles, then this will wrap
    // around back to zero and we can assume the first handle generated will have been dropped by
    // then.
    private val counter = java.util.concurrent.atomic.AtomicInteger(0)

    val size: Int
        get() = map.size

    fun insert(obj: T): USize {
        val handle = USize(counter.getAndAdd(1).toLong())
        map.put(handle, obj)
        return handle
    }

    fun get(handle: USize): T? {
        return map.get(handle)
    }

    fun remove(handle: USize) {
        map.remove(handle)
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "cashu_sdk_ffi"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "cashu_sdk")
            .also { lib: _UniFFILib ->
                uniffiCheckContractApiVersion(lib)
                uniffiCheckApiChecksums(lib)
                }
        }
    }

    fun uniffi_cashu_sdk_fn_free_bolt11invoice(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_bolt11invoice_new(`bolt11`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_bolt11invoice_as_string(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_bolt11invoice_amount(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_amount(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_amount_from_sat(`sat`: Long,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_constructor_amount_from_msat(`msat`: Long,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_amount_to_sat(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Long
    fun uniffi_cashu_sdk_fn_method_amount_to_msat(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Long
    fun uniffi_cashu_sdk_fn_method_amount_split(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_secret(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_secret_new(_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_constructor_secret_from_string(`secret`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_secret_as_bytes(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_id(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_id_new(`id`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_id_as_string(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_publickey(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_publickey_from_hex(`hex`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_publickey_to_hex(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_secretkey(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_method_secretkey_to_hex(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_blindedmessage(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_blindedmessage_new(`amount`: Pointer,`b`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_blindedmessage_amount(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_blindedmessage_b(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_free_proof(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_proof_new(`amount`: Pointer,`secret`: Pointer,`c`: Pointer,`id`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_proof_amount(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_proof_secret(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_proof_c(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_proof_id(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_blindedsignature(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_blindedsignature_new(`id`: Pointer,`amount`: Pointer,`c`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_blindedsignature_id(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_blindedsignature_amount(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_blindedsignature_c(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_free_mintproof(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_mintproof_new(`amount`: RustBuffer.ByValue,`secret`: Pointer,`c`: RustBuffer.ByValue,`id`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_mintproof_amount(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_mintproof_secret(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_mintproof_c(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_mintproof_id(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_mintproofs(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_mintproofs_new(`mint`: RustBuffer.ByValue,`proofs`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_mintproofs_url(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_mintproofs_proofs(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_token(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_token_new(`mint`: RustBuffer.ByValue,`token`: RustBuffer.ByValue,`memo`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_constructor_token_from_string(`token`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_token_token(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_token_memo(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_token_as_string(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_blindedmessages(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_blindedmessages_random(`amount`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_constructor_blindedmessages_blank(`feeReserve`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_blindedmessages_blinded_messages(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_blindedmessages_secrets(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_blindedmessages_rs(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_blindedmessages_amounts(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_keypair(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_keypair_from_secret_key(`secretKey`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_keypair_secret_key(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_keypair_public_key(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_free_keys(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_keys_new(`keys`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_keys_keys(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_keys_as_hashmap(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_keys_amount_key(`ptr`: Pointer,`amount`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_keyset(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_keyset_new(`id`: Pointer,`keys`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_keyset_id(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_keyset_keys(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_free_mintkeyset(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_mintkeyset_generate(`secret`: RustBuffer.ByValue,`derivationPath`: RustBuffer.ByValue,`maxOrder`: Byte,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_free_keysresponse(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_keysresponse_new(`keys`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_free_keysetresponse(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_keysetresponse_new(`keysetIds`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_keysetresponse_keyset_ids(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_requestmintresponse(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_requestmintresponse_new(`invoice`: RustBuffer.ByValue,`hash`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_requestmintresponse_invoice(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_requestmintresponse_hash(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_mintrequest(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_mintrequest_new(`outputs`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_mintrequest_outputs(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_mintrequest_total_amount(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_free_postmintresponse(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_postmintresponse_new(`promises`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_postmintresponse_promises(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_checkfeesrequest(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_checkfeesrequest_new(`invoice`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_checkfeesrequest_invoice(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_checkfeesresponse(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_checkfeesresponse_new(`amount`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_checkfeesresponse_amount(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_free_nut05meltrequest(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_nut05meltrequest_new(`proofs`: RustBuffer.ByValue,`invoice`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_nut05meltrequest_proofs(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_nut05meltrequest_invoice(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_nut05meltresponse(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_nut05meltresponse_new(`paid`: Byte,`preimage`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_nut05meltresponse_paid(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Byte
    fun uniffi_cashu_sdk_fn_method_nut05meltresponse_preimage(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_splitrequest(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_splitrequest_new(`proofs`: RustBuffer.ByValue,`outputs`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_splitrequest_proofs(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_splitrequest_outputs(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_splitrequest_proofs_amount(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_splitrequest_output_amount(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_free_splitresponse(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_splitresponse_new(`promises`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_splitresponse_promises(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_splitresponse_promises_amount(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_checkspendablerequest(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_checkspendablerequest_new(`proofs`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_checkspendablerequest_proofs(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_checkspendableresponse(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_checkspendableresponse_new(`spendable`: RustBuffer.ByValue,`pending`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_checkspendableresponse_spendable(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_checkspendableresponse_pending(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_meltrequest(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_meltrequest_new(`proofs`: RustBuffer.ByValue,`invoice`: RustBuffer.ByValue,`outputs`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_meltrequest_proofs(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_meltrequest_invoice(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_meltrequest_outputs(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_meltresponse(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_meltresponse_new(`paid`: Byte,`preimage`: RustBuffer.ByValue,`change`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_meltresponse_paid(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Byte
    fun uniffi_cashu_sdk_fn_method_meltresponse_preimage(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_meltresponse_change(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_mintversion(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_mintversion_new(`name`: RustBuffer.ByValue,`version`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_mintversion_name(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_mintversion_version(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_mintinfo(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_mintinfo_new(`name`: RustBuffer.ByValue,`pubkey`: RustBuffer.ByValue,`version`: RustBuffer.ByValue,`description`: RustBuffer.ByValue,`descriptionLong`: RustBuffer.ByValue,`contact`: RustBuffer.ByValue,`nuts`: RustBuffer.ByValue,`motd`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_mintinfo_name(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_mintinfo_pubkey(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_mintinfo_version(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_mintinfo_description(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_mintinfo_description_long(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_mintinfo_contact(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_mintinfo_nuts(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_mintinfo_motd(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_proofsstatus(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_proofsstatus_new(`spendable`: RustBuffer.ByValue,`spent`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_proofsstatus_spendable(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_proofsstatus_spent(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_keysetinfo(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_keysetinfo_new(`id`: Pointer,`validFrom`: Long,`validTo`: RustBuffer.ByValue,`secret`: RustBuffer.ByValue,`derivationPath`: RustBuffer.ByValue,`maxOrder`: Byte,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_free_sendproofs(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_sendproofs_new(`changeProofs`: RustBuffer.ByValue,`sendProofs`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_sendproofs_send_proofs(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_sendproofs_change_proofs(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_melted(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_melted_new(`paid`: Byte,`preimage`: RustBuffer.ByValue,`change`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_melted_preimage(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_melted_paid(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Byte
    fun uniffi_cashu_sdk_fn_method_melted_change(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_client(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_client_new(`mintUrl`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_client_get_keys(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_client_get_keysets(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_client_request_mint(`ptr`: Pointer,`amount`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_client_mint(`ptr`: Pointer,`blindedMessages`: Pointer,`hash`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_client_check_fees(`ptr`: Pointer,`invoice`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_client_melt(`ptr`: Pointer,`proofs`: RustBuffer.ByValue,`invoice`: Pointer,`outputs`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_client_split(`ptr`: Pointer,`splitRequest`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_client_check_spendable(`ptr`: Pointer,`proofs`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_client_get_info(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_free_wallet(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_wallet_new(`client`: Pointer,`mintKeys`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_wallet_request_mint(`ptr`: Pointer,`amount`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_wallet_mint_token(`ptr`: Pointer,`amount`: Pointer,`hash`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_wallet_mint(`ptr`: Pointer,`amount`: Pointer,`hash`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_wallet_check_fee(`ptr`: Pointer,`invoice`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_wallet_receive(`ptr`: Pointer,`encodedToken`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_wallet_process_split_response(`ptr`: Pointer,`blindedMessages`: Pointer,`promises`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_wallet_send(`ptr`: Pointer,`amount`: Pointer,`proofs`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_wallet_melt(`ptr`: Pointer,`invoice`: Pointer,`proofs`: RustBuffer.ByValue,`feeReserve`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_wallet_proof_to_token(`ptr`: Pointer,`proof`: RustBuffer.ByValue,`memo`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_free_mint(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_constructor_mint_new(`secret`: RustBuffer.ByValue,`derivationPath`: RustBuffer.ByValue,`inactiveKeysets`: RustBuffer.ByValue,`spentSecrets`: RustBuffer.ByValue,`maxOrder`: Byte,`minFeeReserve`: Pointer,`percentFeeReserve`: Float,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_mint_active_keyset_pubkeys(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_mint_keysets(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_mint_active_keyset(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_mint_keyset(`ptr`: Pointer,`id`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_fn_method_mint_process_mint_request(`ptr`: Pointer,`mintRequest`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_mint_process_split_request(`ptr`: Pointer,`splitRequest`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_cashu_sdk_fn_method_mint_verify_melt_request(`ptr`: Pointer,`meltRequest`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_cashu_sdk_fn_method_mint_process_melt_request(`ptr`: Pointer,`meltRequest`: Pointer,`preimage`: RustBuffer.ByValue,`totoalSpent`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun ffi_cashu_sdk_rustbuffer_alloc(`size`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_cashu_sdk_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_cashu_sdk_rustbuffer_free(`buf`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun ffi_cashu_sdk_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_cashu_sdk_checksum_method_bolt11invoice_as_string(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_bolt11invoice_amount(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_amount_to_sat(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_amount_to_msat(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_amount_split(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_secret_as_bytes(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_id_as_string(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_publickey_to_hex(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_secretkey_to_hex(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_blindedmessage_amount(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_blindedmessage_b(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_proof_amount(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_proof_secret(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_proof_c(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_proof_id(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_blindedsignature_id(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_blindedsignature_amount(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_blindedsignature_c(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mintproof_amount(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mintproof_secret(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mintproof_c(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mintproof_id(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mintproofs_url(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mintproofs_proofs(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_token_token(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_token_memo(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_token_as_string(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_blindedmessages_blinded_messages(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_blindedmessages_secrets(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_blindedmessages_rs(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_blindedmessages_amounts(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_keypair_secret_key(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_keypair_public_key(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_keys_keys(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_keys_as_hashmap(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_keys_amount_key(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_keyset_id(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_keyset_keys(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_keysetresponse_keyset_ids(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_requestmintresponse_invoice(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_requestmintresponse_hash(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mintrequest_outputs(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mintrequest_total_amount(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_postmintresponse_promises(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_checkfeesrequest_invoice(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_checkfeesresponse_amount(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_nut05meltrequest_proofs(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_nut05meltrequest_invoice(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_nut05meltresponse_paid(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_nut05meltresponse_preimage(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_splitrequest_proofs(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_splitrequest_outputs(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_splitrequest_proofs_amount(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_splitrequest_output_amount(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_splitresponse_promises(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_splitresponse_promises_amount(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_checkspendablerequest_proofs(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_checkspendableresponse_spendable(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_checkspendableresponse_pending(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_meltrequest_proofs(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_meltrequest_invoice(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_meltrequest_outputs(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_meltresponse_paid(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_meltresponse_preimage(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_meltresponse_change(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mintversion_name(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mintversion_version(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mintinfo_name(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mintinfo_pubkey(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mintinfo_version(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mintinfo_description(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mintinfo_description_long(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mintinfo_contact(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mintinfo_nuts(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mintinfo_motd(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_proofsstatus_spendable(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_proofsstatus_spent(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_sendproofs_send_proofs(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_sendproofs_change_proofs(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_melted_preimage(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_melted_paid(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_melted_change(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_client_get_keys(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_client_get_keysets(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_client_request_mint(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_client_mint(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_client_check_fees(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_client_melt(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_client_split(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_client_check_spendable(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_client_get_info(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_wallet_request_mint(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_wallet_mint_token(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_wallet_mint(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_wallet_check_fee(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_wallet_receive(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_wallet_process_split_response(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_wallet_send(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_wallet_melt(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_wallet_proof_to_token(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mint_active_keyset_pubkeys(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mint_keysets(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mint_active_keyset(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mint_keyset(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mint_process_mint_request(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mint_process_split_request(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mint_verify_melt_request(
    ): Short
    fun uniffi_cashu_sdk_checksum_method_mint_process_melt_request(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_bolt11invoice_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_amount_from_sat(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_amount_from_msat(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_secret_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_secret_from_string(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_id_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_publickey_from_hex(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_blindedmessage_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_proof_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_blindedsignature_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_mintproof_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_mintproofs_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_token_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_token_from_string(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_blindedmessages_random(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_blindedmessages_blank(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_keypair_from_secret_key(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_keys_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_keyset_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_mintkeyset_generate(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_keysresponse_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_keysetresponse_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_requestmintresponse_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_mintrequest_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_postmintresponse_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_checkfeesrequest_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_checkfeesresponse_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_nut05meltrequest_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_nut05meltresponse_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_splitrequest_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_splitresponse_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_checkspendablerequest_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_checkspendableresponse_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_meltrequest_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_meltresponse_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_mintversion_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_mintinfo_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_proofsstatus_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_keysetinfo_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_sendproofs_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_melted_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_client_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_wallet_new(
    ): Short
    fun uniffi_cashu_sdk_checksum_constructor_mint_new(
    ): Short
    fun ffi_cashu_sdk_uniffi_contract_version(
    ): Int
    
}

private fun uniffiCheckContractApiVersion(lib: _UniFFILib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 22
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_cashu_sdk_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: _UniFFILib) {
    if (lib.uniffi_cashu_sdk_checksum_method_bolt11invoice_as_string() != 24049.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_bolt11invoice_amount() != 45217.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_amount_to_sat() != 50806.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_amount_to_msat() != 19122.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_amount_split() != 12410.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_secret_as_bytes() != 35925.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_id_as_string() != 35839.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_publickey_to_hex() != 21612.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_secretkey_to_hex() != 60182.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_blindedmessage_amount() != 56087.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_blindedmessage_b() != 56301.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_proof_amount() != 49736.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_proof_secret() != 7569.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_proof_c() != 12381.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_proof_id() != 55186.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_blindedsignature_id() != 21533.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_blindedsignature_amount() != 30556.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_blindedsignature_c() != 226.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mintproof_amount() != 49839.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mintproof_secret() != 41098.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mintproof_c() != 35280.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mintproof_id() != 5243.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mintproofs_url() != 23420.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mintproofs_proofs() != 18264.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_token_token() != 59334.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_token_memo() != 64066.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_token_as_string() != 9603.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_blindedmessages_blinded_messages() != 39328.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_blindedmessages_secrets() != 19258.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_blindedmessages_rs() != 44180.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_blindedmessages_amounts() != 35496.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_keypair_secret_key() != 25982.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_keypair_public_key() != 15611.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_keys_keys() != 39111.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_keys_as_hashmap() != 34003.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_keys_amount_key() != 23027.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_keyset_id() != 1435.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_keyset_keys() != 63077.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_keysetresponse_keyset_ids() != 4269.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_requestmintresponse_invoice() != 61342.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_requestmintresponse_hash() != 2811.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mintrequest_outputs() != 45043.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mintrequest_total_amount() != 15397.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_postmintresponse_promises() != 9721.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_checkfeesrequest_invoice() != 28932.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_checkfeesresponse_amount() != 55653.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_nut05meltrequest_proofs() != 33479.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_nut05meltrequest_invoice() != 24779.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_nut05meltresponse_paid() != 9814.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_nut05meltresponse_preimage() != 15772.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_splitrequest_proofs() != 6993.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_splitrequest_outputs() != 49012.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_splitrequest_proofs_amount() != 65054.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_splitrequest_output_amount() != 52595.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_splitresponse_promises() != 41130.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_splitresponse_promises_amount() != 60866.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_checkspendablerequest_proofs() != 60019.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_checkspendableresponse_spendable() != 16336.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_checkspendableresponse_pending() != 57064.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_meltrequest_proofs() != 62133.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_meltrequest_invoice() != 43351.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_meltrequest_outputs() != 10203.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_meltresponse_paid() != 6688.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_meltresponse_preimage() != 65205.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_meltresponse_change() != 4177.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mintversion_name() != 22133.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mintversion_version() != 36697.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mintinfo_name() != 13205.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mintinfo_pubkey() != 16779.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mintinfo_version() != 1137.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mintinfo_description() != 20873.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mintinfo_description_long() != 41627.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mintinfo_contact() != 51049.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mintinfo_nuts() != 37857.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mintinfo_motd() != 24760.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_proofsstatus_spendable() != 31623.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_proofsstatus_spent() != 64403.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_sendproofs_send_proofs() != 16413.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_sendproofs_change_proofs() != 40542.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_melted_preimage() != 9911.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_melted_paid() != 15347.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_melted_change() != 25907.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_client_get_keys() != 13359.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_client_get_keysets() != 16691.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_client_request_mint() != 54079.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_client_mint() != 33635.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_client_check_fees() != 55993.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_client_melt() != 42152.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_client_split() != 20002.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_client_check_spendable() != 57305.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_client_get_info() != 35255.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_wallet_request_mint() != 54048.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_wallet_mint_token() != 25305.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_wallet_mint() != 44670.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_wallet_check_fee() != 62072.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_wallet_receive() != 47033.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_wallet_process_split_response() != 5120.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_wallet_send() != 23544.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_wallet_melt() != 56368.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_wallet_proof_to_token() != 54545.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mint_active_keyset_pubkeys() != 21646.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mint_keysets() != 57548.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mint_active_keyset() != 39458.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mint_keyset() != 58362.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mint_process_mint_request() != 36180.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mint_process_split_request() != 10764.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mint_verify_melt_request() != 621.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_method_mint_process_melt_request() != 41089.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_bolt11invoice_new() != 33363.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_amount_from_sat() != 11118.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_amount_from_msat() != 41553.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_secret_new() != 52339.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_secret_from_string() != 39475.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_id_new() != 37263.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_publickey_from_hex() != 12424.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_blindedmessage_new() != 9844.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_proof_new() != 29061.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_blindedsignature_new() != 58616.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_mintproof_new() != 22359.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_mintproofs_new() != 36610.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_token_new() != 18417.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_token_from_string() != 29605.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_blindedmessages_random() != 49065.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_blindedmessages_blank() != 24619.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_keypair_from_secret_key() != 50418.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_keys_new() != 36778.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_keyset_new() != 21137.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_mintkeyset_generate() != 61789.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_keysresponse_new() != 51081.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_keysetresponse_new() != 54309.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_requestmintresponse_new() != 45362.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_mintrequest_new() != 16684.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_postmintresponse_new() != 39583.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_checkfeesrequest_new() != 52444.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_checkfeesresponse_new() != 13408.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_nut05meltrequest_new() != 24871.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_nut05meltresponse_new() != 29991.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_splitrequest_new() != 45013.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_splitresponse_new() != 2814.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_checkspendablerequest_new() != 41328.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_checkspendableresponse_new() != 4010.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_meltrequest_new() != 16053.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_meltresponse_new() != 58539.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_mintversion_new() != 5157.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_mintinfo_new() != 30040.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_proofsstatus_new() != 46376.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_keysetinfo_new() != 17025.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_sendproofs_new() != 46333.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_melted_new() != 13209.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_client_new() != 53069.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_wallet_new() != 23763.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_cashu_sdk_checksum_constructor_mint_new() != 62037.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Public interface members begin here.


public object FfiConverterUByte: FfiConverter<UByte, Byte> {
    override fun lift(value: Byte): UByte {
        return value.toUByte()
    }

    override fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    override fun lower(value: UByte): Byte {
        return value.toByte()
    }

    override fun allocationSize(value: UByte) = 1

    override fun write(value: UByte, buf: ByteBuffer) {
        buf.put(value.toByte())
    }
}

public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterFloat: FfiConverter<Float, Float> {
    override fun lift(value: Float): Float {
        return value
    }

    override fun read(buf: ByteBuffer): Float {
        return buf.getFloat()
    }

    override fun lower(value: Float): Float {
        return value
    }

    override fun allocationSize(value: Float) = 4

    override fun write(value: Float, buf: ByteBuffer) {
        buf.putFloat(value)
    }
}

public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteArr.size)
        rbuf.asByteBuffer()!!.put(byteArr)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        buf.putInt(byteArr.size)
        buf.put(byteArr)
    }
}


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

// The base class for all UniFFI Object types.
//
// This class provides core operations for working with the Rust `Arc<T>` pointer to
// the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// the Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each `FFIObject` instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an `FFIObject` is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an `FFIObject` instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so will
//     leak the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each `FFIObject` an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// In the future we may be able to replace some of this with automatic finalization logic, such as using
// the new "Cleaner" functionaility in Java 9. The above scheme has been designed to work even if `destroy` is
// invoked by garbage-collection machinery rather than by calling code (which by the way, it's apparently also
// possible for the JVM to finalize an object while there is an in-flight call to one of its methods [1],
// so there would still be some complexity here).
//
// Sigh...all of this for want of a robust finalization mechanism.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//
abstract class FFIObject(
    protected val pointer: Pointer
): Disposable, AutoCloseable {

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    open protected fun freeRustArcPtr() {
        // To be overridden in subclasses.
    }

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.pointer)
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }
}

public interface AmountInterface {
    
    fun `toSat`(): ULong
    fun `toMsat`(): ULong
    fun `split`(): List<Amount>
}

class Amount(
    pointer: Pointer
) : FFIObject(pointer), AmountInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_amount(this.pointer, status)
        }
    }

    override fun `toSat`(): ULong =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_amount_to_sat(it,
        
        _status)
}
        }.let {
            FfiConverterULong.lift(it)
        }
    
    override fun `toMsat`(): ULong =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_amount_to_msat(it,
        
        _status)
}
        }.let {
            FfiConverterULong.lift(it)
        }
    
    override fun `split`(): List<Amount> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_amount_split(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeAmount.lift(it)
        }
    
    

    companion object {
        fun `fromSat`(`sat`: ULong): Amount =
            Amount(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_amount_from_sat(FfiConverterULong.lower(`sat`),_status)
})
        fun `fromMsat`(`msat`: ULong): Amount =
            Amount(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_amount_from_msat(FfiConverterULong.lower(`msat`),_status)
})
        
    }
    
}

public object FfiConverterTypeAmount: FfiConverter<Amount, Pointer> {
    override fun lower(value: Amount): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Amount {
        return Amount(value)
    }

    override fun read(buf: ByteBuffer): Amount {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Amount) = 8

    override fun write(value: Amount, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface BlindedMessageInterface {
    
    fun `amount`(): Amount
    fun `b`(): PublicKey
}

class BlindedMessage(
    pointer: Pointer
) : FFIObject(pointer), BlindedMessageInterface {
    constructor(`amount`: Amount, `b`: PublicKey) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_blindedmessage_new(FfiConverterTypeAmount.lower(`amount`),FfiConverterTypePublicKey.lower(`b`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_blindedmessage(this.pointer, status)
        }
    }

    override fun `amount`(): Amount =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_blindedmessage_amount(it,
        
        _status)
}
        }.let {
            FfiConverterTypeAmount.lift(it)
        }
    
    override fun `b`(): PublicKey =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_blindedmessage_b(it,
        
        _status)
}
        }.let {
            FfiConverterTypePublicKey.lift(it)
        }
    
    

    
}

public object FfiConverterTypeBlindedMessage: FfiConverter<BlindedMessage, Pointer> {
    override fun lower(value: BlindedMessage): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): BlindedMessage {
        return BlindedMessage(value)
    }

    override fun read(buf: ByteBuffer): BlindedMessage {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: BlindedMessage) = 8

    override fun write(value: BlindedMessage, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface BlindedMessagesInterface {
    
    fun `blindedMessages`(): List<BlindedMessage>
    fun `secrets`(): List<Secret>
    fun `rs`(): List<SecretKey>
    fun `amounts`(): List<Amount>
}

class BlindedMessages(
    pointer: Pointer
) : FFIObject(pointer), BlindedMessagesInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_blindedmessages(this.pointer, status)
        }
    }

    override fun `blindedMessages`(): List<BlindedMessage> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_blindedmessages_blinded_messages(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeBlindedMessage.lift(it)
        }
    
    override fun `secrets`(): List<Secret> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_blindedmessages_secrets(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeSecret.lift(it)
        }
    
    override fun `rs`(): List<SecretKey> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_blindedmessages_rs(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeSecretKey.lift(it)
        }
    
    override fun `amounts`(): List<Amount> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_blindedmessages_amounts(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeAmount.lift(it)
        }
    
    

    companion object {
        fun `random`(`amount`: Amount): BlindedMessages =
            BlindedMessages(
    rustCallWithError(CashuException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_blindedmessages_random(FfiConverterTypeAmount.lower(`amount`),_status)
})
        fun `blank`(`feeReserve`: Amount): BlindedMessages =
            BlindedMessages(
    rustCallWithError(CashuException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_blindedmessages_blank(FfiConverterTypeAmount.lower(`feeReserve`),_status)
})
        
    }
    
}

public object FfiConverterTypeBlindedMessages: FfiConverter<BlindedMessages, Pointer> {
    override fun lower(value: BlindedMessages): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): BlindedMessages {
        return BlindedMessages(value)
    }

    override fun read(buf: ByteBuffer): BlindedMessages {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: BlindedMessages) = 8

    override fun write(value: BlindedMessages, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface BlindedSignatureInterface {
    
    fun `id`(): Id
    fun `amount`(): Amount
    fun `c`(): PublicKey
}

class BlindedSignature(
    pointer: Pointer
) : FFIObject(pointer), BlindedSignatureInterface {
    constructor(`id`: Id, `amount`: Amount, `c`: PublicKey) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_blindedsignature_new(FfiConverterTypeId.lower(`id`),FfiConverterTypeAmount.lower(`amount`),FfiConverterTypePublicKey.lower(`c`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_blindedsignature(this.pointer, status)
        }
    }

    override fun `id`(): Id =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_blindedsignature_id(it,
        
        _status)
}
        }.let {
            FfiConverterTypeId.lift(it)
        }
    
    override fun `amount`(): Amount =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_blindedsignature_amount(it,
        
        _status)
}
        }.let {
            FfiConverterTypeAmount.lift(it)
        }
    
    override fun `c`(): PublicKey =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_blindedsignature_c(it,
        
        _status)
}
        }.let {
            FfiConverterTypePublicKey.lift(it)
        }
    
    

    
}

public object FfiConverterTypeBlindedSignature: FfiConverter<BlindedSignature, Pointer> {
    override fun lower(value: BlindedSignature): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): BlindedSignature {
        return BlindedSignature(value)
    }

    override fun read(buf: ByteBuffer): BlindedSignature {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: BlindedSignature) = 8

    override fun write(value: BlindedSignature, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface Bolt11InvoiceInterface {
    
    fun `asString`(): String
    fun `amount`(): Amount?
}

class Bolt11Invoice(
    pointer: Pointer
) : FFIObject(pointer), Bolt11InvoiceInterface {
    constructor(`bolt11`: String) :
        this(
    rustCallWithError(CashuException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_bolt11invoice_new(FfiConverterString.lower(`bolt11`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_bolt11invoice(this.pointer, status)
        }
    }

    override fun `asString`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_bolt11invoice_as_string(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `amount`(): Amount? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_bolt11invoice_amount(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalTypeAmount.lift(it)
        }
    
    

    
}

public object FfiConverterTypeBolt11Invoice: FfiConverter<Bolt11Invoice, Pointer> {
    override fun lower(value: Bolt11Invoice): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Bolt11Invoice {
        return Bolt11Invoice(value)
    }

    override fun read(buf: ByteBuffer): Bolt11Invoice {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Bolt11Invoice) = 8

    override fun write(value: Bolt11Invoice, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface CheckFeesRequestInterface {
    
    fun `invoice`(): String
}

class CheckFeesRequest(
    pointer: Pointer
) : FFIObject(pointer), CheckFeesRequestInterface {
    constructor(`invoice`: String) :
        this(
    rustCallWithError(CashuException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_checkfeesrequest_new(FfiConverterString.lower(`invoice`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_checkfeesrequest(this.pointer, status)
        }
    }

    override fun `invoice`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_checkfeesrequest_invoice(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
}

public object FfiConverterTypeCheckFeesRequest: FfiConverter<CheckFeesRequest, Pointer> {
    override fun lower(value: CheckFeesRequest): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): CheckFeesRequest {
        return CheckFeesRequest(value)
    }

    override fun read(buf: ByteBuffer): CheckFeesRequest {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: CheckFeesRequest) = 8

    override fun write(value: CheckFeesRequest, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface CheckFeesResponseInterface {
    
    fun `amount`(): Amount
}

class CheckFeesResponse(
    pointer: Pointer
) : FFIObject(pointer), CheckFeesResponseInterface {
    constructor(`amount`: Amount) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_checkfeesresponse_new(FfiConverterTypeAmount.lower(`amount`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_checkfeesresponse(this.pointer, status)
        }
    }

    override fun `amount`(): Amount =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_checkfeesresponse_amount(it,
        
        _status)
}
        }.let {
            FfiConverterTypeAmount.lift(it)
        }
    
    

    
}

public object FfiConverterTypeCheckFeesResponse: FfiConverter<CheckFeesResponse, Pointer> {
    override fun lower(value: CheckFeesResponse): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): CheckFeesResponse {
        return CheckFeesResponse(value)
    }

    override fun read(buf: ByteBuffer): CheckFeesResponse {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: CheckFeesResponse) = 8

    override fun write(value: CheckFeesResponse, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface CheckSpendableRequestInterface {
    
    fun `proofs`(): List<MintProof>
}

class CheckSpendableRequest(
    pointer: Pointer
) : FFIObject(pointer), CheckSpendableRequestInterface {
    constructor(`proofs`: List<MintProof>) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_checkspendablerequest_new(FfiConverterSequenceTypeMintProof.lower(`proofs`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_checkspendablerequest(this.pointer, status)
        }
    }

    override fun `proofs`(): List<MintProof> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_checkspendablerequest_proofs(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeMintProof.lift(it)
        }
    
    

    
}

public object FfiConverterTypeCheckSpendableRequest: FfiConverter<CheckSpendableRequest, Pointer> {
    override fun lower(value: CheckSpendableRequest): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): CheckSpendableRequest {
        return CheckSpendableRequest(value)
    }

    override fun read(buf: ByteBuffer): CheckSpendableRequest {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: CheckSpendableRequest) = 8

    override fun write(value: CheckSpendableRequest, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface CheckSpendableResponseInterface {
    
    fun `spendable`(): List<Boolean>
    fun `pending`(): List<Boolean>
}

class CheckSpendableResponse(
    pointer: Pointer
) : FFIObject(pointer), CheckSpendableResponseInterface {
    constructor(`spendable`: List<Boolean>, `pending`: List<Boolean>) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_checkspendableresponse_new(FfiConverterSequenceBoolean.lower(`spendable`),FfiConverterSequenceBoolean.lower(`pending`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_checkspendableresponse(this.pointer, status)
        }
    }

    override fun `spendable`(): List<Boolean> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_checkspendableresponse_spendable(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceBoolean.lift(it)
        }
    
    override fun `pending`(): List<Boolean> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_checkspendableresponse_pending(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceBoolean.lift(it)
        }
    
    

    
}

public object FfiConverterTypeCheckSpendableResponse: FfiConverter<CheckSpendableResponse, Pointer> {
    override fun lower(value: CheckSpendableResponse): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): CheckSpendableResponse {
        return CheckSpendableResponse(value)
    }

    override fun read(buf: ByteBuffer): CheckSpendableResponse {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: CheckSpendableResponse) = 8

    override fun write(value: CheckSpendableResponse, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface ClientInterface {
    @Throws(CashuSdkException::class)
    fun `getKeys`(): Keys@Throws(CashuSdkException::class)
    fun `getKeysets`(): KeySetResponse@Throws(CashuSdkException::class)
    fun `requestMint`(`amount`: Amount): RequestMintResponse@Throws(CashuSdkException::class)
    fun `mint`(`blindedMessages`: BlindedMessages, `hash`: String): PostMintResponse@Throws(CashuSdkException::class)
    fun `checkFees`(`invoice`: Bolt11Invoice): CheckFeesResponse@Throws(CashuSdkException::class)
    fun `melt`(`proofs`: List<Proof>, `invoice`: Bolt11Invoice, `outputs`: List<BlindedMessage>?): MeltResponse@Throws(CashuSdkException::class)
    fun `split`(`splitRequest`: SplitRequest): SplitResponse@Throws(CashuSdkException::class)
    fun `checkSpendable`(`proofs`: List<MintProof>): CheckSpendableResponse@Throws(CashuSdkException::class)
    fun `getInfo`(): MintInfo
}

class Client(
    pointer: Pointer
) : FFIObject(pointer), ClientInterface {
    constructor(`mintUrl`: String) :
        this(
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_client_new(FfiConverterString.lower(`mintUrl`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_client(this.pointer, status)
        }
    }

    
    @Throws(CashuSdkException::class)override fun `getKeys`(): Keys =
        callWithPointer {
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_client_get_keys(it,
        
        _status)
}
        }.let {
            FfiConverterTypeKeys.lift(it)
        }
    
    
    @Throws(CashuSdkException::class)override fun `getKeysets`(): KeySetResponse =
        callWithPointer {
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_client_get_keysets(it,
        
        _status)
}
        }.let {
            FfiConverterTypeKeySetResponse.lift(it)
        }
    
    
    @Throws(CashuSdkException::class)override fun `requestMint`(`amount`: Amount): RequestMintResponse =
        callWithPointer {
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_client_request_mint(it,
        FfiConverterTypeAmount.lower(`amount`),
        _status)
}
        }.let {
            FfiConverterTypeRequestMintResponse.lift(it)
        }
    
    
    @Throws(CashuSdkException::class)override fun `mint`(`blindedMessages`: BlindedMessages, `hash`: String): PostMintResponse =
        callWithPointer {
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_client_mint(it,
        FfiConverterTypeBlindedMessages.lower(`blindedMessages`),FfiConverterString.lower(`hash`),
        _status)
}
        }.let {
            FfiConverterTypePostMintResponse.lift(it)
        }
    
    
    @Throws(CashuSdkException::class)override fun `checkFees`(`invoice`: Bolt11Invoice): CheckFeesResponse =
        callWithPointer {
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_client_check_fees(it,
        FfiConverterTypeBolt11Invoice.lower(`invoice`),
        _status)
}
        }.let {
            FfiConverterTypeCheckFeesResponse.lift(it)
        }
    
    
    @Throws(CashuSdkException::class)override fun `melt`(`proofs`: List<Proof>, `invoice`: Bolt11Invoice, `outputs`: List<BlindedMessage>?): MeltResponse =
        callWithPointer {
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_client_melt(it,
        FfiConverterSequenceTypeProof.lower(`proofs`),FfiConverterTypeBolt11Invoice.lower(`invoice`),FfiConverterOptionalSequenceTypeBlindedMessage.lower(`outputs`),
        _status)
}
        }.let {
            FfiConverterTypeMeltResponse.lift(it)
        }
    
    
    @Throws(CashuSdkException::class)override fun `split`(`splitRequest`: SplitRequest): SplitResponse =
        callWithPointer {
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_client_split(it,
        FfiConverterTypeSplitRequest.lower(`splitRequest`),
        _status)
}
        }.let {
            FfiConverterTypeSplitResponse.lift(it)
        }
    
    
    @Throws(CashuSdkException::class)override fun `checkSpendable`(`proofs`: List<MintProof>): CheckSpendableResponse =
        callWithPointer {
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_client_check_spendable(it,
        FfiConverterSequenceTypeMintProof.lower(`proofs`),
        _status)
}
        }.let {
            FfiConverterTypeCheckSpendableResponse.lift(it)
        }
    
    
    @Throws(CashuSdkException::class)override fun `getInfo`(): MintInfo =
        callWithPointer {
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_client_get_info(it,
        
        _status)
}
        }.let {
            FfiConverterTypeMintInfo.lift(it)
        }
    
    

    
}

public object FfiConverterTypeClient: FfiConverter<Client, Pointer> {
    override fun lower(value: Client): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Client {
        return Client(value)
    }

    override fun read(buf: ByteBuffer): Client {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Client) = 8

    override fun write(value: Client, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface IdInterface {
    
    fun `asString`(): String
}

class Id(
    pointer: Pointer
) : FFIObject(pointer), IdInterface {
    constructor(`id`: String) :
        this(
    rustCallWithError(CashuException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_id_new(FfiConverterString.lower(`id`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_id(this.pointer, status)
        }
    }

    override fun `asString`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_id_as_string(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
}

public object FfiConverterTypeId: FfiConverter<Id, Pointer> {
    override fun lower(value: Id): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Id {
        return Id(value)
    }

    override fun read(buf: ByteBuffer): Id {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Id) = 8

    override fun write(value: Id, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface KeyPairInterface {
    
    fun `secretKey`(): SecretKey
    fun `publicKey`(): PublicKey
}

class KeyPair(
    pointer: Pointer
) : FFIObject(pointer), KeyPairInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_keypair(this.pointer, status)
        }
    }

    override fun `secretKey`(): SecretKey =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_keypair_secret_key(it,
        
        _status)
}
        }.let {
            FfiConverterTypeSecretKey.lift(it)
        }
    
    override fun `publicKey`(): PublicKey =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_keypair_public_key(it,
        
        _status)
}
        }.let {
            FfiConverterTypePublicKey.lift(it)
        }
    
    

    companion object {
        fun `fromSecretKey`(`secretKey`: SecretKey): KeyPair =
            KeyPair(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_keypair_from_secret_key(FfiConverterTypeSecretKey.lower(`secretKey`),_status)
})
        
    }
    
}

public object FfiConverterTypeKeyPair: FfiConverter<KeyPair, Pointer> {
    override fun lower(value: KeyPair): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): KeyPair {
        return KeyPair(value)
    }

    override fun read(buf: ByteBuffer): KeyPair {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: KeyPair) = 8

    override fun write(value: KeyPair, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface KeySetInterface {
    
    fun `id`(): Id
    fun `keys`(): Keys
}

class KeySet(
    pointer: Pointer
) : FFIObject(pointer), KeySetInterface {
    constructor(`id`: Id, `keys`: Keys) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_keyset_new(FfiConverterTypeId.lower(`id`),FfiConverterTypeKeys.lower(`keys`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_keyset(this.pointer, status)
        }
    }

    override fun `id`(): Id =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_keyset_id(it,
        
        _status)
}
        }.let {
            FfiConverterTypeId.lift(it)
        }
    
    override fun `keys`(): Keys =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_keyset_keys(it,
        
        _status)
}
        }.let {
            FfiConverterTypeKeys.lift(it)
        }
    
    

    
}

public object FfiConverterTypeKeySet: FfiConverter<KeySet, Pointer> {
    override fun lower(value: KeySet): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): KeySet {
        return KeySet(value)
    }

    override fun read(buf: ByteBuffer): KeySet {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: KeySet) = 8

    override fun write(value: KeySet, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface KeySetInfoInterface {
    
}

class KeySetInfo(
    pointer: Pointer
) : FFIObject(pointer), KeySetInfoInterface {
    constructor(`id`: Id, `validFrom`: ULong, `validTo`: ULong?, `secret`: String, `derivationPath`: String, `maxOrder`: UByte) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_keysetinfo_new(FfiConverterTypeId.lower(`id`),FfiConverterULong.lower(`validFrom`),FfiConverterOptionalULong.lower(`validTo`),FfiConverterString.lower(`secret`),FfiConverterString.lower(`derivationPath`),FfiConverterUByte.lower(`maxOrder`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_keysetinfo(this.pointer, status)
        }
    }

    

    
}

public object FfiConverterTypeKeySetInfo: FfiConverter<KeySetInfo, Pointer> {
    override fun lower(value: KeySetInfo): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): KeySetInfo {
        return KeySetInfo(value)
    }

    override fun read(buf: ByteBuffer): KeySetInfo {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: KeySetInfo) = 8

    override fun write(value: KeySetInfo, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface KeySetResponseInterface {
    
    fun `keysetIds`(): List<Id>
}

class KeySetResponse(
    pointer: Pointer
) : FFIObject(pointer), KeySetResponseInterface {
    constructor(`keysetIds`: List<Id>) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_keysetresponse_new(FfiConverterSequenceTypeId.lower(`keysetIds`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_keysetresponse(this.pointer, status)
        }
    }

    override fun `keysetIds`(): List<Id> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_keysetresponse_keyset_ids(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeId.lift(it)
        }
    
    

    
}

public object FfiConverterTypeKeySetResponse: FfiConverter<KeySetResponse, Pointer> {
    override fun lower(value: KeySetResponse): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): KeySetResponse {
        return KeySetResponse(value)
    }

    override fun read(buf: ByteBuffer): KeySetResponse {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: KeySetResponse) = 8

    override fun write(value: KeySetResponse, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface KeysInterface {
    
    fun `keys`(): Map<String, PublicKey>
    fun `asHashmap`(): Map<String, String>
    fun `amountKey`(`amount`: Amount): PublicKey?
}

class Keys(
    pointer: Pointer
) : FFIObject(pointer), KeysInterface {
    constructor(`keys`: Map<String, PublicKey>) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_keys_new(FfiConverterMapStringTypePublicKey.lower(`keys`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_keys(this.pointer, status)
        }
    }

    override fun `keys`(): Map<String, PublicKey> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_keys_keys(it,
        
        _status)
}
        }.let {
            FfiConverterMapStringTypePublicKey.lift(it)
        }
    
    override fun `asHashmap`(): Map<String, String> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_keys_as_hashmap(it,
        
        _status)
}
        }.let {
            FfiConverterMapStringString.lift(it)
        }
    
    override fun `amountKey`(`amount`: Amount): PublicKey? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_keys_amount_key(it,
        FfiConverterTypeAmount.lower(`amount`),
        _status)
}
        }.let {
            FfiConverterOptionalTypePublicKey.lift(it)
        }
    
    

    
}

public object FfiConverterTypeKeys: FfiConverter<Keys, Pointer> {
    override fun lower(value: Keys): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Keys {
        return Keys(value)
    }

    override fun read(buf: ByteBuffer): Keys {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Keys) = 8

    override fun write(value: Keys, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface KeysResponseInterface {
    
}

class KeysResponse(
    pointer: Pointer
) : FFIObject(pointer), KeysResponseInterface {
    constructor(`keys`: Keys) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_keysresponse_new(FfiConverterTypeKeys.lower(`keys`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_keysresponse(this.pointer, status)
        }
    }

    

    
}

public object FfiConverterTypeKeysResponse: FfiConverter<KeysResponse, Pointer> {
    override fun lower(value: KeysResponse): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): KeysResponse {
        return KeysResponse(value)
    }

    override fun read(buf: ByteBuffer): KeysResponse {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: KeysResponse) = 8

    override fun write(value: KeysResponse, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface MeltRequestInterface {
    
    fun `proofs`(): List<Proof>
    fun `invoice`(): String
    fun `outputs`(): List<BlindedMessage>?
}

class MeltRequest(
    pointer: Pointer
) : FFIObject(pointer), MeltRequestInterface {
    constructor(`proofs`: List<Proof>, `invoice`: String, `outputs`: List<BlindedMessage>?) :
        this(
    rustCallWithError(CashuException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_meltrequest_new(FfiConverterSequenceTypeProof.lower(`proofs`),FfiConverterString.lower(`invoice`),FfiConverterOptionalSequenceTypeBlindedMessage.lower(`outputs`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_meltrequest(this.pointer, status)
        }
    }

    override fun `proofs`(): List<Proof> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_meltrequest_proofs(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeProof.lift(it)
        }
    
    override fun `invoice`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_meltrequest_invoice(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `outputs`(): List<BlindedMessage>? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_meltrequest_outputs(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalSequenceTypeBlindedMessage.lift(it)
        }
    
    

    
}

public object FfiConverterTypeMeltRequest: FfiConverter<MeltRequest, Pointer> {
    override fun lower(value: MeltRequest): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): MeltRequest {
        return MeltRequest(value)
    }

    override fun read(buf: ByteBuffer): MeltRequest {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: MeltRequest) = 8

    override fun write(value: MeltRequest, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface MeltResponseInterface {
    
    fun `paid`(): Boolean
    fun `preimage`(): String?
    fun `change`(): List<BlindedSignature>?
}

class MeltResponse(
    pointer: Pointer
) : FFIObject(pointer), MeltResponseInterface {
    constructor(`paid`: Boolean, `preimage`: String?, `change`: List<BlindedSignature>?) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_meltresponse_new(FfiConverterBoolean.lower(`paid`),FfiConverterOptionalString.lower(`preimage`),FfiConverterOptionalSequenceTypeBlindedSignature.lower(`change`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_meltresponse(this.pointer, status)
        }
    }

    override fun `paid`(): Boolean =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_meltresponse_paid(it,
        
        _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    override fun `preimage`(): String? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_meltresponse_preimage(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    override fun `change`(): List<BlindedSignature>? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_meltresponse_change(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalSequenceTypeBlindedSignature.lift(it)
        }
    
    

    
}

public object FfiConverterTypeMeltResponse: FfiConverter<MeltResponse, Pointer> {
    override fun lower(value: MeltResponse): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): MeltResponse {
        return MeltResponse(value)
    }

    override fun read(buf: ByteBuffer): MeltResponse {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: MeltResponse) = 8

    override fun write(value: MeltResponse, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface MeltedInterface {
    
    fun `preimage`(): String?
    fun `paid`(): Boolean
    fun `change`(): List<Proof>?
}

class Melted(
    pointer: Pointer
) : FFIObject(pointer), MeltedInterface {
    constructor(`paid`: Boolean, `preimage`: String?, `change`: List<Proof>?) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_melted_new(FfiConverterBoolean.lower(`paid`),FfiConverterOptionalString.lower(`preimage`),FfiConverterOptionalSequenceTypeProof.lower(`change`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_melted(this.pointer, status)
        }
    }

    override fun `preimage`(): String? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_melted_preimage(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    override fun `paid`(): Boolean =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_melted_paid(it,
        
        _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    override fun `change`(): List<Proof>? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_melted_change(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalSequenceTypeProof.lift(it)
        }
    
    

    
}

public object FfiConverterTypeMelted: FfiConverter<Melted, Pointer> {
    override fun lower(value: Melted): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Melted {
        return Melted(value)
    }

    override fun read(buf: ByteBuffer): Melted {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Melted) = 8

    override fun write(value: Melted, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface MintInterface {
    
    fun `activeKeysetPubkeys`(): KeysResponse
    fun `keysets`(): KeySetResponse
    fun `activeKeyset`(): MintKeySet
    fun `keyset`(`id`: Id): KeySet?@Throws(CashuSdkException::class)
    fun `processMintRequest`(`mintRequest`: MintRequest): PostMintResponse@Throws(CashuSdkException::class)
    fun `processSplitRequest`(`splitRequest`: SplitRequest): SplitResponse@Throws(CashuSdkException::class)
    fun `verifyMeltRequest`(`meltRequest`: MeltRequest)@Throws(CashuSdkException::class)
    fun `processMeltRequest`(`meltRequest`: MeltRequest, `preimage`: String, `totoalSpent`: Amount): MeltResponse
}

class Mint(
    pointer: Pointer
) : FFIObject(pointer), MintInterface {
    constructor(`secret`: String, `derivationPath`: String, `inactiveKeysets`: List<KeySetInfo>, `spentSecrets`: List<Secret>, `maxOrder`: UByte, `minFeeReserve`: Amount, `percentFeeReserve`: Float) :
        this(
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_mint_new(FfiConverterString.lower(`secret`),FfiConverterString.lower(`derivationPath`),FfiConverterSequenceTypeKeySetInfo.lower(`inactiveKeysets`),FfiConverterSequenceTypeSecret.lower(`spentSecrets`),FfiConverterUByte.lower(`maxOrder`),FfiConverterTypeAmount.lower(`minFeeReserve`),FfiConverterFloat.lower(`percentFeeReserve`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_mint(this.pointer, status)
        }
    }

    override fun `activeKeysetPubkeys`(): KeysResponse =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mint_active_keyset_pubkeys(it,
        
        _status)
}
        }.let {
            FfiConverterTypeKeysResponse.lift(it)
        }
    
    override fun `keysets`(): KeySetResponse =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mint_keysets(it,
        
        _status)
}
        }.let {
            FfiConverterTypeKeySetResponse.lift(it)
        }
    
    override fun `activeKeyset`(): MintKeySet =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mint_active_keyset(it,
        
        _status)
}
        }.let {
            FfiConverterTypeMintKeySet.lift(it)
        }
    
    override fun `keyset`(`id`: Id): KeySet? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mint_keyset(it,
        FfiConverterTypeId.lower(`id`),
        _status)
}
        }.let {
            FfiConverterOptionalTypeKeySet.lift(it)
        }
    
    
    @Throws(CashuSdkException::class)override fun `processMintRequest`(`mintRequest`: MintRequest): PostMintResponse =
        callWithPointer {
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mint_process_mint_request(it,
        FfiConverterTypeMintRequest.lower(`mintRequest`),
        _status)
}
        }.let {
            FfiConverterTypePostMintResponse.lift(it)
        }
    
    
    @Throws(CashuSdkException::class)override fun `processSplitRequest`(`splitRequest`: SplitRequest): SplitResponse =
        callWithPointer {
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mint_process_split_request(it,
        FfiConverterTypeSplitRequest.lower(`splitRequest`),
        _status)
}
        }.let {
            FfiConverterTypeSplitResponse.lift(it)
        }
    
    
    @Throws(CashuSdkException::class)override fun `verifyMeltRequest`(`meltRequest`: MeltRequest) =
        callWithPointer {
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mint_verify_melt_request(it,
        FfiConverterTypeMeltRequest.lower(`meltRequest`),
        _status)
}
        }
    
    
    
    @Throws(CashuSdkException::class)override fun `processMeltRequest`(`meltRequest`: MeltRequest, `preimage`: String, `totoalSpent`: Amount): MeltResponse =
        callWithPointer {
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mint_process_melt_request(it,
        FfiConverterTypeMeltRequest.lower(`meltRequest`),FfiConverterString.lower(`preimage`),FfiConverterTypeAmount.lower(`totoalSpent`),
        _status)
}
        }.let {
            FfiConverterTypeMeltResponse.lift(it)
        }
    
    

    
}

public object FfiConverterTypeMint: FfiConverter<Mint, Pointer> {
    override fun lower(value: Mint): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Mint {
        return Mint(value)
    }

    override fun read(buf: ByteBuffer): Mint {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Mint) = 8

    override fun write(value: Mint, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface MintInfoInterface {
    
    fun `name`(): String?
    fun `pubkey`(): PublicKey?
    fun `version`(): MintVersion?
    fun `description`(): String?
    fun `descriptionLong`(): String?
    fun `contact`(): List<List<String>>?
    fun `nuts`(): List<String>
    fun `motd`(): String?
}

class MintInfo(
    pointer: Pointer
) : FFIObject(pointer), MintInfoInterface {
    constructor(`name`: String?, `pubkey`: PublicKey?, `version`: MintVersion?, `description`: String?, `descriptionLong`: String?, `contact`: List<List<String>>?, `nuts`: List<String>, `motd`: String?) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_mintinfo_new(FfiConverterOptionalString.lower(`name`),FfiConverterOptionalTypePublicKey.lower(`pubkey`),FfiConverterOptionalTypeMintVersion.lower(`version`),FfiConverterOptionalString.lower(`description`),FfiConverterOptionalString.lower(`descriptionLong`),FfiConverterOptionalSequenceSequenceString.lower(`contact`),FfiConverterSequenceString.lower(`nuts`),FfiConverterOptionalString.lower(`motd`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_mintinfo(this.pointer, status)
        }
    }

    override fun `name`(): String? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mintinfo_name(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    override fun `pubkey`(): PublicKey? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mintinfo_pubkey(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalTypePublicKey.lift(it)
        }
    
    override fun `version`(): MintVersion? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mintinfo_version(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalTypeMintVersion.lift(it)
        }
    
    override fun `description`(): String? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mintinfo_description(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    override fun `descriptionLong`(): String? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mintinfo_description_long(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    override fun `contact`(): List<List<String>>? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mintinfo_contact(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalSequenceSequenceString.lift(it)
        }
    
    override fun `nuts`(): List<String> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mintinfo_nuts(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceString.lift(it)
        }
    
    override fun `motd`(): String? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mintinfo_motd(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    

    
}

public object FfiConverterTypeMintInfo: FfiConverter<MintInfo, Pointer> {
    override fun lower(value: MintInfo): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): MintInfo {
        return MintInfo(value)
    }

    override fun read(buf: ByteBuffer): MintInfo {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: MintInfo) = 8

    override fun write(value: MintInfo, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface MintKeySetInterface {
    
}

class MintKeySet(
    pointer: Pointer
) : FFIObject(pointer), MintKeySetInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_mintkeyset(this.pointer, status)
        }
    }

    

    companion object {
        fun `generate`(`secret`: String, `derivationPath`: String, `maxOrder`: UByte): MintKeySet =
            MintKeySet(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_mintkeyset_generate(FfiConverterString.lower(`secret`),FfiConverterString.lower(`derivationPath`),FfiConverterUByte.lower(`maxOrder`),_status)
})
        
    }
    
}

public object FfiConverterTypeMintKeySet: FfiConverter<MintKeySet, Pointer> {
    override fun lower(value: MintKeySet): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): MintKeySet {
        return MintKeySet(value)
    }

    override fun read(buf: ByteBuffer): MintKeySet {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: MintKeySet) = 8

    override fun write(value: MintKeySet, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface MintProofInterface {
    
    fun `amount`(): Amount?
    fun `secret`(): Secret
    fun `c`(): PublicKey?
    fun `id`(): Id?
}

class MintProof(
    pointer: Pointer
) : FFIObject(pointer), MintProofInterface {
    constructor(`amount`: Amount?, `secret`: Secret, `c`: PublicKey?, `id`: Id?) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_mintproof_new(FfiConverterOptionalTypeAmount.lower(`amount`),FfiConverterTypeSecret.lower(`secret`),FfiConverterOptionalTypePublicKey.lower(`c`),FfiConverterOptionalTypeId.lower(`id`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_mintproof(this.pointer, status)
        }
    }

    override fun `amount`(): Amount? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mintproof_amount(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalTypeAmount.lift(it)
        }
    
    override fun `secret`(): Secret =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mintproof_secret(it,
        
        _status)
}
        }.let {
            FfiConverterTypeSecret.lift(it)
        }
    
    override fun `c`(): PublicKey? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mintproof_c(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalTypePublicKey.lift(it)
        }
    
    override fun `id`(): Id? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mintproof_id(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalTypeId.lift(it)
        }
    
    

    
}

public object FfiConverterTypeMintProof: FfiConverter<MintProof, Pointer> {
    override fun lower(value: MintProof): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): MintProof {
        return MintProof(value)
    }

    override fun read(buf: ByteBuffer): MintProof {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: MintProof) = 8

    override fun write(value: MintProof, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface MintProofsInterface {
    
    fun `url`(): String
    fun `proofs`(): List<Proof>
}

class MintProofs(
    pointer: Pointer
) : FFIObject(pointer), MintProofsInterface {
    constructor(`mint`: String, `proofs`: List<Proof>) :
        this(
    rustCallWithError(CashuException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_mintproofs_new(FfiConverterString.lower(`mint`),FfiConverterSequenceTypeProof.lower(`proofs`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_mintproofs(this.pointer, status)
        }
    }

    override fun `url`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mintproofs_url(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `proofs`(): List<Proof> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mintproofs_proofs(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeProof.lift(it)
        }
    
    

    
}

public object FfiConverterTypeMintProofs: FfiConverter<MintProofs, Pointer> {
    override fun lower(value: MintProofs): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): MintProofs {
        return MintProofs(value)
    }

    override fun read(buf: ByteBuffer): MintProofs {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: MintProofs) = 8

    override fun write(value: MintProofs, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface MintRequestInterface {
    
    fun `outputs`(): List<BlindedMessage>
    fun `totalAmount`(): Amount
}

class MintRequest(
    pointer: Pointer
) : FFIObject(pointer), MintRequestInterface {
    constructor(`outputs`: List<BlindedMessage>) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_mintrequest_new(FfiConverterSequenceTypeBlindedMessage.lower(`outputs`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_mintrequest(this.pointer, status)
        }
    }

    override fun `outputs`(): List<BlindedMessage> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mintrequest_outputs(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeBlindedMessage.lift(it)
        }
    
    override fun `totalAmount`(): Amount =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mintrequest_total_amount(it,
        
        _status)
}
        }.let {
            FfiConverterTypeAmount.lift(it)
        }
    
    

    
}

public object FfiConverterTypeMintRequest: FfiConverter<MintRequest, Pointer> {
    override fun lower(value: MintRequest): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): MintRequest {
        return MintRequest(value)
    }

    override fun read(buf: ByteBuffer): MintRequest {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: MintRequest) = 8

    override fun write(value: MintRequest, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface MintVersionInterface {
    
    fun `name`(): String
    fun `version`(): String
}

class MintVersion(
    pointer: Pointer
) : FFIObject(pointer), MintVersionInterface {
    constructor(`name`: String, `version`: String) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_mintversion_new(FfiConverterString.lower(`name`),FfiConverterString.lower(`version`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_mintversion(this.pointer, status)
        }
    }

    override fun `name`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mintversion_name(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `version`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_mintversion_version(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
}

public object FfiConverterTypeMintVersion: FfiConverter<MintVersion, Pointer> {
    override fun lower(value: MintVersion): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): MintVersion {
        return MintVersion(value)
    }

    override fun read(buf: ByteBuffer): MintVersion {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: MintVersion) = 8

    override fun write(value: MintVersion, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface Nut05MeltRequestInterface {
    
    fun `proofs`(): List<Proof>
    fun `invoice`(): String
}

class Nut05MeltRequest(
    pointer: Pointer
) : FFIObject(pointer), Nut05MeltRequestInterface {
    constructor(`proofs`: List<Proof>, `invoice`: String) :
        this(
    rustCallWithError(CashuException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_nut05meltrequest_new(FfiConverterSequenceTypeProof.lower(`proofs`),FfiConverterString.lower(`invoice`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_nut05meltrequest(this.pointer, status)
        }
    }

    override fun `proofs`(): List<Proof> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_nut05meltrequest_proofs(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeProof.lift(it)
        }
    
    override fun `invoice`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_nut05meltrequest_invoice(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
}

public object FfiConverterTypeNut05MeltRequest: FfiConverter<Nut05MeltRequest, Pointer> {
    override fun lower(value: Nut05MeltRequest): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Nut05MeltRequest {
        return Nut05MeltRequest(value)
    }

    override fun read(buf: ByteBuffer): Nut05MeltRequest {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Nut05MeltRequest) = 8

    override fun write(value: Nut05MeltRequest, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface Nut05MeltResponseInterface {
    
    fun `paid`(): Boolean
    fun `preimage`(): String?
}

class Nut05MeltResponse(
    pointer: Pointer
) : FFIObject(pointer), Nut05MeltResponseInterface {
    constructor(`paid`: Boolean, `preimage`: String?) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_nut05meltresponse_new(FfiConverterBoolean.lower(`paid`),FfiConverterOptionalString.lower(`preimage`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_nut05meltresponse(this.pointer, status)
        }
    }

    override fun `paid`(): Boolean =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_nut05meltresponse_paid(it,
        
        _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    override fun `preimage`(): String? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_nut05meltresponse_preimage(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    

    
}

public object FfiConverterTypeNut05MeltResponse: FfiConverter<Nut05MeltResponse, Pointer> {
    override fun lower(value: Nut05MeltResponse): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Nut05MeltResponse {
        return Nut05MeltResponse(value)
    }

    override fun read(buf: ByteBuffer): Nut05MeltResponse {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Nut05MeltResponse) = 8

    override fun write(value: Nut05MeltResponse, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface PostMintResponseInterface {
    
    fun `promises`(): List<BlindedSignature>
}

class PostMintResponse(
    pointer: Pointer
) : FFIObject(pointer), PostMintResponseInterface {
    constructor(`promises`: List<BlindedSignature>) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_postmintresponse_new(FfiConverterSequenceTypeBlindedSignature.lower(`promises`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_postmintresponse(this.pointer, status)
        }
    }

    override fun `promises`(): List<BlindedSignature> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_postmintresponse_promises(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeBlindedSignature.lift(it)
        }
    
    

    
}

public object FfiConverterTypePostMintResponse: FfiConverter<PostMintResponse, Pointer> {
    override fun lower(value: PostMintResponse): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): PostMintResponse {
        return PostMintResponse(value)
    }

    override fun read(buf: ByteBuffer): PostMintResponse {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: PostMintResponse) = 8

    override fun write(value: PostMintResponse, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface ProofInterface {
    
    fun `amount`(): Amount
    fun `secret`(): Secret
    fun `c`(): PublicKey
    fun `id`(): Id?
}

class Proof(
    pointer: Pointer
) : FFIObject(pointer), ProofInterface {
    constructor(`amount`: Amount, `secret`: Secret, `c`: PublicKey, `id`: Id?) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_proof_new(FfiConverterTypeAmount.lower(`amount`),FfiConverterTypeSecret.lower(`secret`),FfiConverterTypePublicKey.lower(`c`),FfiConverterOptionalTypeId.lower(`id`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_proof(this.pointer, status)
        }
    }

    override fun `amount`(): Amount =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_proof_amount(it,
        
        _status)
}
        }.let {
            FfiConverterTypeAmount.lift(it)
        }
    
    override fun `secret`(): Secret =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_proof_secret(it,
        
        _status)
}
        }.let {
            FfiConverterTypeSecret.lift(it)
        }
    
    override fun `c`(): PublicKey =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_proof_c(it,
        
        _status)
}
        }.let {
            FfiConverterTypePublicKey.lift(it)
        }
    
    override fun `id`(): Id? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_proof_id(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalTypeId.lift(it)
        }
    
    

    
}

public object FfiConverterTypeProof: FfiConverter<Proof, Pointer> {
    override fun lower(value: Proof): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Proof {
        return Proof(value)
    }

    override fun read(buf: ByteBuffer): Proof {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Proof) = 8

    override fun write(value: Proof, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface ProofsStatusInterface {
    
    fun `spendable`(): List<MintProof>
    fun `spent`(): List<MintProof>
}

class ProofsStatus(
    pointer: Pointer
) : FFIObject(pointer), ProofsStatusInterface {
    constructor(`spendable`: List<MintProof>, `spent`: List<MintProof>) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_proofsstatus_new(FfiConverterSequenceTypeMintProof.lower(`spendable`),FfiConverterSequenceTypeMintProof.lower(`spent`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_proofsstatus(this.pointer, status)
        }
    }

    override fun `spendable`(): List<MintProof> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_proofsstatus_spendable(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeMintProof.lift(it)
        }
    
    override fun `spent`(): List<MintProof> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_proofsstatus_spent(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeMintProof.lift(it)
        }
    
    

    
}

public object FfiConverterTypeProofsStatus: FfiConverter<ProofsStatus, Pointer> {
    override fun lower(value: ProofsStatus): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): ProofsStatus {
        return ProofsStatus(value)
    }

    override fun read(buf: ByteBuffer): ProofsStatus {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: ProofsStatus) = 8

    override fun write(value: ProofsStatus, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface PublicKeyInterface {
    @Throws(CashuException::class)
    fun `toHex`(): String
}

class PublicKey(
    pointer: Pointer
) : FFIObject(pointer), PublicKeyInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_publickey(this.pointer, status)
        }
    }

    
    @Throws(CashuException::class)override fun `toHex`(): String =
        callWithPointer {
    rustCallWithError(CashuException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_publickey_to_hex(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    companion object {
        fun `fromHex`(`hex`: String): PublicKey =
            PublicKey(
    rustCallWithError(CashuException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_publickey_from_hex(FfiConverterString.lower(`hex`),_status)
})
        
    }
    
}

public object FfiConverterTypePublicKey: FfiConverter<PublicKey, Pointer> {
    override fun lower(value: PublicKey): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): PublicKey {
        return PublicKey(value)
    }

    override fun read(buf: ByteBuffer): PublicKey {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: PublicKey) = 8

    override fun write(value: PublicKey, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface RequestMintResponseInterface {
    
    fun `invoice`(): String
    fun `hash`(): String
}

class RequestMintResponse(
    pointer: Pointer
) : FFIObject(pointer), RequestMintResponseInterface {
    constructor(`invoice`: String, `hash`: String) :
        this(
    rustCallWithError(CashuException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_requestmintresponse_new(FfiConverterString.lower(`invoice`),FfiConverterString.lower(`hash`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_requestmintresponse(this.pointer, status)
        }
    }

    override fun `invoice`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_requestmintresponse_invoice(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `hash`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_requestmintresponse_hash(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
}

public object FfiConverterTypeRequestMintResponse: FfiConverter<RequestMintResponse, Pointer> {
    override fun lower(value: RequestMintResponse): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): RequestMintResponse {
        return RequestMintResponse(value)
    }

    override fun read(buf: ByteBuffer): RequestMintResponse {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: RequestMintResponse) = 8

    override fun write(value: RequestMintResponse, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface SecretInterface {
    
    fun `asBytes`(): List<UByte>
}

class Secret(
    pointer: Pointer
) : FFIObject(pointer), SecretInterface {
    constructor() :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_secret_new(_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_secret(this.pointer, status)
        }
    }

    override fun `asBytes`(): List<UByte> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_secret_as_bytes(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceUByte.lift(it)
        }
    
    

    companion object {
        fun `fromString`(`secret`: String): Secret =
            Secret(
    rustCallWithError(CashuException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_secret_from_string(FfiConverterString.lower(`secret`),_status)
})
        
    }
    
}

public object FfiConverterTypeSecret: FfiConverter<Secret, Pointer> {
    override fun lower(value: Secret): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Secret {
        return Secret(value)
    }

    override fun read(buf: ByteBuffer): Secret {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Secret) = 8

    override fun write(value: Secret, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface SecretKeyInterface {
    @Throws(CashuException::class)
    fun `toHex`(): String
}

class SecretKey(
    pointer: Pointer
) : FFIObject(pointer), SecretKeyInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_secretkey(this.pointer, status)
        }
    }

    
    @Throws(CashuException::class)override fun `toHex`(): String =
        callWithPointer {
    rustCallWithError(CashuException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_secretkey_to_hex(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
}

public object FfiConverterTypeSecretKey: FfiConverter<SecretKey, Pointer> {
    override fun lower(value: SecretKey): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): SecretKey {
        return SecretKey(value)
    }

    override fun read(buf: ByteBuffer): SecretKey {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: SecretKey) = 8

    override fun write(value: SecretKey, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface SendProofsInterface {
    
    fun `sendProofs`(): List<Proof>
    fun `changeProofs`(): List<Proof>
}

class SendProofs(
    pointer: Pointer
) : FFIObject(pointer), SendProofsInterface {
    constructor(`changeProofs`: List<Proof>, `sendProofs`: List<Proof>) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_sendproofs_new(FfiConverterSequenceTypeProof.lower(`changeProofs`),FfiConverterSequenceTypeProof.lower(`sendProofs`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_sendproofs(this.pointer, status)
        }
    }

    override fun `sendProofs`(): List<Proof> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_sendproofs_send_proofs(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeProof.lift(it)
        }
    
    override fun `changeProofs`(): List<Proof> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_sendproofs_change_proofs(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeProof.lift(it)
        }
    
    

    
}

public object FfiConverterTypeSendProofs: FfiConverter<SendProofs, Pointer> {
    override fun lower(value: SendProofs): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): SendProofs {
        return SendProofs(value)
    }

    override fun read(buf: ByteBuffer): SendProofs {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: SendProofs) = 8

    override fun write(value: SendProofs, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface SplitRequestInterface {
    
    fun `proofs`(): List<Proof>
    fun `outputs`(): List<BlindedMessage>
    fun `proofsAmount`(): Amount
    fun `outputAmount`(): Amount
}

class SplitRequest(
    pointer: Pointer
) : FFIObject(pointer), SplitRequestInterface {
    constructor(`proofs`: List<Proof>, `outputs`: List<BlindedMessage>) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_splitrequest_new(FfiConverterSequenceTypeProof.lower(`proofs`),FfiConverterSequenceTypeBlindedMessage.lower(`outputs`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_splitrequest(this.pointer, status)
        }
    }

    override fun `proofs`(): List<Proof> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_splitrequest_proofs(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeProof.lift(it)
        }
    
    override fun `outputs`(): List<BlindedMessage> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_splitrequest_outputs(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeBlindedMessage.lift(it)
        }
    
    override fun `proofsAmount`(): Amount =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_splitrequest_proofs_amount(it,
        
        _status)
}
        }.let {
            FfiConverterTypeAmount.lift(it)
        }
    
    override fun `outputAmount`(): Amount =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_splitrequest_output_amount(it,
        
        _status)
}
        }.let {
            FfiConverterTypeAmount.lift(it)
        }
    
    

    
}

public object FfiConverterTypeSplitRequest: FfiConverter<SplitRequest, Pointer> {
    override fun lower(value: SplitRequest): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): SplitRequest {
        return SplitRequest(value)
    }

    override fun read(buf: ByteBuffer): SplitRequest {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: SplitRequest) = 8

    override fun write(value: SplitRequest, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface SplitResponseInterface {
    
    fun `promises`(): List<BlindedSignature>
    fun `promisesAmount`(): Amount?
}

class SplitResponse(
    pointer: Pointer
) : FFIObject(pointer), SplitResponseInterface {
    constructor(`promises`: List<BlindedSignature>) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_splitresponse_new(FfiConverterSequenceTypeBlindedSignature.lower(`promises`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_splitresponse(this.pointer, status)
        }
    }

    override fun `promises`(): List<BlindedSignature> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_splitresponse_promises(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeBlindedSignature.lift(it)
        }
    
    override fun `promisesAmount`(): Amount? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_splitresponse_promises_amount(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalTypeAmount.lift(it)
        }
    
    

    
}

public object FfiConverterTypeSplitResponse: FfiConverter<SplitResponse, Pointer> {
    override fun lower(value: SplitResponse): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): SplitResponse {
        return SplitResponse(value)
    }

    override fun read(buf: ByteBuffer): SplitResponse {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: SplitResponse) = 8

    override fun write(value: SplitResponse, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface TokenInterface {
    
    fun `token`(): List<MintProofs>
    fun `memo`(): String?@Throws(CashuException::class)
    fun `asString`(): String
}

class Token(
    pointer: Pointer
) : FFIObject(pointer), TokenInterface {
    constructor(`mint`: String, `token`: List<Proof>, `memo`: String?) :
        this(
    rustCallWithError(CashuException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_token_new(FfiConverterString.lower(`mint`),FfiConverterSequenceTypeProof.lower(`token`),FfiConverterOptionalString.lower(`memo`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_token(this.pointer, status)
        }
    }

    override fun `token`(): List<MintProofs> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_token_token(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeMintProofs.lift(it)
        }
    
    override fun `memo`(): String? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_token_memo(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    
    @Throws(CashuException::class)override fun `asString`(): String =
        callWithPointer {
    rustCallWithError(CashuException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_token_as_string(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    companion object {
        fun `fromString`(`token`: String): Token =
            Token(
    rustCallWithError(CashuException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_token_from_string(FfiConverterString.lower(`token`),_status)
})
        
    }
    
}

public object FfiConverterTypeToken: FfiConverter<Token, Pointer> {
    override fun lower(value: Token): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Token {
        return Token(value)
    }

    override fun read(buf: ByteBuffer): Token {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Token) = 8

    override fun write(value: Token, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface WalletInterface {
    @Throws(CashuSdkException::class)
    fun `requestMint`(`amount`: Amount): RequestMintResponse@Throws(CashuSdkException::class)
    fun `mintToken`(`amount`: Amount, `hash`: String): Token@Throws(CashuSdkException::class)
    fun `mint`(`amount`: Amount, `hash`: String): List<Proof>@Throws(CashuSdkException::class)
    fun `checkFee`(`invoice`: Bolt11Invoice): Amount@Throws(CashuSdkException::class)
    fun `receive`(`encodedToken`: String): List<Proof>@Throws(CashuSdkException::class)
    fun `processSplitResponse`(`blindedMessages`: BlindedMessages, `promises`: List<BlindedSignature>): List<Proof>@Throws(CashuSdkException::class)
    fun `send`(`amount`: Amount, `proofs`: List<Proof>): SendProofs@Throws(CashuSdkException::class)
    fun `melt`(`invoice`: Bolt11Invoice, `proofs`: List<Proof>, `feeReserve`: Amount): Melted@Throws(CashuSdkException::class)
    fun `proofToToken`(`proof`: List<Proof>, `memo`: String?): String
}

class Wallet(
    pointer: Pointer
) : FFIObject(pointer), WalletInterface {
    constructor(`client`: Client, `mintKeys`: Keys) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_constructor_wallet_new(FfiConverterTypeClient.lower(`client`),FfiConverterTypeKeys.lower(`mintKeys`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_free_wallet(this.pointer, status)
        }
    }

    
    @Throws(CashuSdkException::class)override fun `requestMint`(`amount`: Amount): RequestMintResponse =
        callWithPointer {
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_wallet_request_mint(it,
        FfiConverterTypeAmount.lower(`amount`),
        _status)
}
        }.let {
            FfiConverterTypeRequestMintResponse.lift(it)
        }
    
    
    @Throws(CashuSdkException::class)override fun `mintToken`(`amount`: Amount, `hash`: String): Token =
        callWithPointer {
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_wallet_mint_token(it,
        FfiConverterTypeAmount.lower(`amount`),FfiConverterString.lower(`hash`),
        _status)
}
        }.let {
            FfiConverterTypeToken.lift(it)
        }
    
    
    @Throws(CashuSdkException::class)override fun `mint`(`amount`: Amount, `hash`: String): List<Proof> =
        callWithPointer {
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_wallet_mint(it,
        FfiConverterTypeAmount.lower(`amount`),FfiConverterString.lower(`hash`),
        _status)
}
        }.let {
            FfiConverterSequenceTypeProof.lift(it)
        }
    
    
    @Throws(CashuSdkException::class)override fun `checkFee`(`invoice`: Bolt11Invoice): Amount =
        callWithPointer {
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_wallet_check_fee(it,
        FfiConverterTypeBolt11Invoice.lower(`invoice`),
        _status)
}
        }.let {
            FfiConverterTypeAmount.lift(it)
        }
    
    
    @Throws(CashuSdkException::class)override fun `receive`(`encodedToken`: String): List<Proof> =
        callWithPointer {
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_wallet_receive(it,
        FfiConverterString.lower(`encodedToken`),
        _status)
}
        }.let {
            FfiConverterSequenceTypeProof.lift(it)
        }
    
    
    @Throws(CashuSdkException::class)override fun `processSplitResponse`(`blindedMessages`: BlindedMessages, `promises`: List<BlindedSignature>): List<Proof> =
        callWithPointer {
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_wallet_process_split_response(it,
        FfiConverterTypeBlindedMessages.lower(`blindedMessages`),FfiConverterSequenceTypeBlindedSignature.lower(`promises`),
        _status)
}
        }.let {
            FfiConverterSequenceTypeProof.lift(it)
        }
    
    
    @Throws(CashuSdkException::class)override fun `send`(`amount`: Amount, `proofs`: List<Proof>): SendProofs =
        callWithPointer {
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_wallet_send(it,
        FfiConverterTypeAmount.lower(`amount`),FfiConverterSequenceTypeProof.lower(`proofs`),
        _status)
}
        }.let {
            FfiConverterTypeSendProofs.lift(it)
        }
    
    
    @Throws(CashuSdkException::class)override fun `melt`(`invoice`: Bolt11Invoice, `proofs`: List<Proof>, `feeReserve`: Amount): Melted =
        callWithPointer {
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_wallet_melt(it,
        FfiConverterTypeBolt11Invoice.lower(`invoice`),FfiConverterSequenceTypeProof.lower(`proofs`),FfiConverterTypeAmount.lower(`feeReserve`),
        _status)
}
        }.let {
            FfiConverterTypeMelted.lift(it)
        }
    
    
    @Throws(CashuSdkException::class)override fun `proofToToken`(`proof`: List<Proof>, `memo`: String?): String =
        callWithPointer {
    rustCallWithError(CashuSdkException) { _status ->
    _UniFFILib.INSTANCE.uniffi_cashu_sdk_fn_method_wallet_proof_to_token(it,
        FfiConverterSequenceTypeProof.lower(`proof`),FfiConverterOptionalString.lower(`memo`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
}

public object FfiConverterTypeWallet: FfiConverter<Wallet, Pointer> {
    override fun lower(value: Wallet): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Wallet {
        return Wallet(value)
    }

    override fun read(buf: ByteBuffer): Wallet {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Wallet) = 8

    override fun write(value: Wallet, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





sealed class CashuException: Exception() {
    // Each variant is a nested class
    
    class Generic(
        val `err`: String
        ) : CashuException() {
        override val message
            get() = "err=${ `err` }"
    }
    

    companion object ErrorHandler : CallStatusErrorHandler<CashuException> {
        override fun lift(error_buf: RustBuffer.ByValue): CashuException = FfiConverterTypeCashuError.lift(error_buf)
    }

    
}

public object FfiConverterTypeCashuError : FfiConverterRustBuffer<CashuException> {
    override fun read(buf: ByteBuffer): CashuException {
        

        return when(buf.getInt()) {
            1 -> CashuException.Generic(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: CashuException): Int {
        return when(value) {
            is CashuException.Generic -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`err`)
            )
        }
    }

    override fun write(value: CashuException, buf: ByteBuffer) {
        when(value) {
            is CashuException.Generic -> {
                buf.putInt(1)
                FfiConverterString.write(value.`err`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





sealed class CashuSdkException: Exception() {
    // Each variant is a nested class
    
    class Generic(
        val `err`: String
        ) : CashuSdkException() {
        override val message
            get() = "err=${ `err` }"
    }
    

    companion object ErrorHandler : CallStatusErrorHandler<CashuSdkException> {
        override fun lift(error_buf: RustBuffer.ByValue): CashuSdkException = FfiConverterTypeCashuSdkError.lift(error_buf)
    }

    
}

public object FfiConverterTypeCashuSdkError : FfiConverterRustBuffer<CashuSdkException> {
    override fun read(buf: ByteBuffer): CashuSdkException {
        

        return when(buf.getInt()) {
            1 -> CashuSdkException.Generic(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: CashuSdkException): Int {
        return when(value) {
            is CashuSdkException.Generic -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`err`)
            )
        }
    }

    override fun write(value: CashuSdkException, buf: ByteBuffer) {
        when(value) {
            is CashuSdkException.Generic -> {
                buf.putInt(1)
                FfiConverterString.write(value.`err`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




enum class InvoiceStatus {
    UNPAID,PAID,EXPIRED,IN_FLIGHT;
}

public object FfiConverterTypeInvoiceStatus: FfiConverterRustBuffer<InvoiceStatus> {
    override fun read(buf: ByteBuffer) = try {
        InvoiceStatus.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: InvoiceStatus) = 4

    override fun write(value: InvoiceStatus, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






public object FfiConverterOptionalULong: FfiConverterRustBuffer<ULong?> {
    override fun read(buf: ByteBuffer): ULong? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterULong.read(buf)
    }

    override fun allocationSize(value: ULong?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterULong.allocationSize(value)
        }
    }

    override fun write(value: ULong?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterULong.write(value, buf)
        }
    }
}




public object FfiConverterOptionalString: FfiConverterRustBuffer<String?> {
    override fun read(buf: ByteBuffer): String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: String?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeAmount: FfiConverterRustBuffer<Amount?> {
    override fun read(buf: ByteBuffer): Amount? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeAmount.read(buf)
    }

    override fun allocationSize(value: Amount?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeAmount.allocationSize(value)
        }
    }

    override fun write(value: Amount?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeAmount.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeId: FfiConverterRustBuffer<Id?> {
    override fun read(buf: ByteBuffer): Id? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeId.read(buf)
    }

    override fun allocationSize(value: Id?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeId.allocationSize(value)
        }
    }

    override fun write(value: Id?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeId.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeKeySet: FfiConverterRustBuffer<KeySet?> {
    override fun read(buf: ByteBuffer): KeySet? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeKeySet.read(buf)
    }

    override fun allocationSize(value: KeySet?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeKeySet.allocationSize(value)
        }
    }

    override fun write(value: KeySet?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeKeySet.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeMintVersion: FfiConverterRustBuffer<MintVersion?> {
    override fun read(buf: ByteBuffer): MintVersion? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeMintVersion.read(buf)
    }

    override fun allocationSize(value: MintVersion?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeMintVersion.allocationSize(value)
        }
    }

    override fun write(value: MintVersion?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeMintVersion.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypePublicKey: FfiConverterRustBuffer<PublicKey?> {
    override fun read(buf: ByteBuffer): PublicKey? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypePublicKey.read(buf)
    }

    override fun allocationSize(value: PublicKey?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypePublicKey.allocationSize(value)
        }
    }

    override fun write(value: PublicKey?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypePublicKey.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceTypeBlindedMessage: FfiConverterRustBuffer<List<BlindedMessage>?> {
    override fun read(buf: ByteBuffer): List<BlindedMessage>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceTypeBlindedMessage.read(buf)
    }

    override fun allocationSize(value: List<BlindedMessage>?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterSequenceTypeBlindedMessage.allocationSize(value)
        }
    }

    override fun write(value: List<BlindedMessage>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceTypeBlindedMessage.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceTypeBlindedSignature: FfiConverterRustBuffer<List<BlindedSignature>?> {
    override fun read(buf: ByteBuffer): List<BlindedSignature>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceTypeBlindedSignature.read(buf)
    }

    override fun allocationSize(value: List<BlindedSignature>?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterSequenceTypeBlindedSignature.allocationSize(value)
        }
    }

    override fun write(value: List<BlindedSignature>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceTypeBlindedSignature.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceTypeProof: FfiConverterRustBuffer<List<Proof>?> {
    override fun read(buf: ByteBuffer): List<Proof>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceTypeProof.read(buf)
    }

    override fun allocationSize(value: List<Proof>?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterSequenceTypeProof.allocationSize(value)
        }
    }

    override fun write(value: List<Proof>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceTypeProof.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceSequenceString: FfiConverterRustBuffer<List<List<String>>?> {
    override fun read(buf: ByteBuffer): List<List<String>>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceSequenceString.read(buf)
    }

    override fun allocationSize(value: List<List<String>>?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterSequenceSequenceString.allocationSize(value)
        }
    }

    override fun write(value: List<List<String>>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceSequenceString.write(value, buf)
        }
    }
}




public object FfiConverterSequenceUByte: FfiConverterRustBuffer<List<UByte>> {
    override fun read(buf: ByteBuffer): List<UByte> {
        val len = buf.getInt()
        return List<UByte>(len) {
            FfiConverterUByte.read(buf)
        }
    }

    override fun allocationSize(value: List<UByte>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterUByte.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<UByte>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterUByte.write(it, buf)
        }
    }
}




public object FfiConverterSequenceBoolean: FfiConverterRustBuffer<List<Boolean>> {
    override fun read(buf: ByteBuffer): List<Boolean> {
        val len = buf.getInt()
        return List<Boolean>(len) {
            FfiConverterBoolean.read(buf)
        }
    }

    override fun allocationSize(value: List<Boolean>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterBoolean.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Boolean>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterBoolean.write(it, buf)
        }
    }
}




public object FfiConverterSequenceString: FfiConverterRustBuffer<List<String>> {
    override fun read(buf: ByteBuffer): List<String> {
        val len = buf.getInt()
        return List<String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<String>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterString.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeAmount: FfiConverterRustBuffer<List<Amount>> {
    override fun read(buf: ByteBuffer): List<Amount> {
        val len = buf.getInt()
        return List<Amount>(len) {
            FfiConverterTypeAmount.read(buf)
        }
    }

    override fun allocationSize(value: List<Amount>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeAmount.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Amount>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeAmount.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeBlindedMessage: FfiConverterRustBuffer<List<BlindedMessage>> {
    override fun read(buf: ByteBuffer): List<BlindedMessage> {
        val len = buf.getInt()
        return List<BlindedMessage>(len) {
            FfiConverterTypeBlindedMessage.read(buf)
        }
    }

    override fun allocationSize(value: List<BlindedMessage>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeBlindedMessage.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<BlindedMessage>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeBlindedMessage.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeBlindedSignature: FfiConverterRustBuffer<List<BlindedSignature>> {
    override fun read(buf: ByteBuffer): List<BlindedSignature> {
        val len = buf.getInt()
        return List<BlindedSignature>(len) {
            FfiConverterTypeBlindedSignature.read(buf)
        }
    }

    override fun allocationSize(value: List<BlindedSignature>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeBlindedSignature.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<BlindedSignature>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeBlindedSignature.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeId: FfiConverterRustBuffer<List<Id>> {
    override fun read(buf: ByteBuffer): List<Id> {
        val len = buf.getInt()
        return List<Id>(len) {
            FfiConverterTypeId.read(buf)
        }
    }

    override fun allocationSize(value: List<Id>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeId.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Id>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeId.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeKeySetInfo: FfiConverterRustBuffer<List<KeySetInfo>> {
    override fun read(buf: ByteBuffer): List<KeySetInfo> {
        val len = buf.getInt()
        return List<KeySetInfo>(len) {
            FfiConverterTypeKeySetInfo.read(buf)
        }
    }

    override fun allocationSize(value: List<KeySetInfo>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeKeySetInfo.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<KeySetInfo>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeKeySetInfo.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeMintProof: FfiConverterRustBuffer<List<MintProof>> {
    override fun read(buf: ByteBuffer): List<MintProof> {
        val len = buf.getInt()
        return List<MintProof>(len) {
            FfiConverterTypeMintProof.read(buf)
        }
    }

    override fun allocationSize(value: List<MintProof>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeMintProof.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<MintProof>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeMintProof.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeMintProofs: FfiConverterRustBuffer<List<MintProofs>> {
    override fun read(buf: ByteBuffer): List<MintProofs> {
        val len = buf.getInt()
        return List<MintProofs>(len) {
            FfiConverterTypeMintProofs.read(buf)
        }
    }

    override fun allocationSize(value: List<MintProofs>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeMintProofs.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<MintProofs>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeMintProofs.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeProof: FfiConverterRustBuffer<List<Proof>> {
    override fun read(buf: ByteBuffer): List<Proof> {
        val len = buf.getInt()
        return List<Proof>(len) {
            FfiConverterTypeProof.read(buf)
        }
    }

    override fun allocationSize(value: List<Proof>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeProof.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Proof>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeProof.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeSecret: FfiConverterRustBuffer<List<Secret>> {
    override fun read(buf: ByteBuffer): List<Secret> {
        val len = buf.getInt()
        return List<Secret>(len) {
            FfiConverterTypeSecret.read(buf)
        }
    }

    override fun allocationSize(value: List<Secret>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeSecret.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Secret>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeSecret.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeSecretKey: FfiConverterRustBuffer<List<SecretKey>> {
    override fun read(buf: ByteBuffer): List<SecretKey> {
        val len = buf.getInt()
        return List<SecretKey>(len) {
            FfiConverterTypeSecretKey.read(buf)
        }
    }

    override fun allocationSize(value: List<SecretKey>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeSecretKey.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<SecretKey>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeSecretKey.write(it, buf)
        }
    }
}




public object FfiConverterSequenceSequenceString: FfiConverterRustBuffer<List<List<String>>> {
    override fun read(buf: ByteBuffer): List<List<String>> {
        val len = buf.getInt()
        return List<List<String>>(len) {
            FfiConverterSequenceString.read(buf)
        }
    }

    override fun allocationSize(value: List<List<String>>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterSequenceString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<List<String>>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterSequenceString.write(it, buf)
        }
    }
}



public object FfiConverterMapStringString: FfiConverterRustBuffer<Map<String, String>> {
    override fun read(buf: ByteBuffer): Map<String, String> {
        // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
        val items : MutableMap<String, String> = mutableMapOf()
        val len = buf.getInt()
        repeat(len) {
            val k = FfiConverterString.read(buf)
            val v = FfiConverterString.read(buf)
            items[k] = v
        }
        return items
    }

    override fun allocationSize(value: Map<String, String>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterString.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<String, String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterString.write(v, buf)
        }
    }
}



public object FfiConverterMapStringTypePublicKey: FfiConverterRustBuffer<Map<String, PublicKey>> {
    override fun read(buf: ByteBuffer): Map<String, PublicKey> {
        // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
        val items : MutableMap<String, PublicKey> = mutableMapOf()
        val len = buf.getInt()
        repeat(len) {
            val k = FfiConverterString.read(buf)
            val v = FfiConverterTypePublicKey.read(buf)
            items[k] = v
        }
        return items
    }

    override fun allocationSize(value: Map<String, PublicKey>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterTypePublicKey.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<String, PublicKey>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterTypePublicKey.write(v, buf)
        }
    }
}

